#!/usr/bin/env python

import sys, subprocess, threading, os, signal, time

assert len(sys.argv) > 1

os.environ['LD_LIBRARY_PATH'] = '.'
condition = threading.Condition()
condition.acquire()

def time_to_die():
    condition.acquire()
    condition.notify()
    condition.release()

def abort_child(signum, frame):
    print >> sys.stderr, "deadly", signum, "signal"
    frame = None
    time_to_die()
    try:
        os.kill(childpid, signal.SIGKILL)
    except Exception:
        import traceback
        traceback.print_exc()

signal.signal(signal.SIGUSR1, abort_child)

start = time.time()
child = subprocess.Popen(sys.argv[1:])
childpid = child.pid
childfinished = False

def childwatch():
    global childfinished
    child.wait()
    end = time.time()
    #print >> sys.stderr, "real", end - start
    condition.acquire()
    childfinished = True
    condition.notify()
    condition.release()
    #print >> sys.stderr, "childwatch ended"

def stdinwatch():
    sys.stdin.read()
    #print >> sys.stderr, "stdinwatch triggered"
    time_to_die()
    #print >> sys.stderr, "stdinwatch ended"

chwth = threading.Thread(target=childwatch)
chwth.start()
th = threading.Thread(target=stdinwatch)
th.setDaemon(True)
th.start()

condition.wait()
if not childfinished:
    try:
        os.kill(childpid, signal.SIGKILL)
    except OSError:
        pass
condition.release()
#print >> sys.stderr, "main thread ended"

chwth.join()
sys.exit(child.returncode)

