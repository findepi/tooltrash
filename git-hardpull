#!/bin/bash -e

program_name="$(basename "$0")"
green=$'\e[0;32m'
red=$'\e[0;31m'
end_color=$'\e[0m'

ex() {
    echo "${green}+ $(printf '%q ' "$@" | sed 's/ $//')${end_color}" >&2
    "$@"
}

err() {
    echo "${red}${program_name}: $*${end_color}" >&2
}

sed="$(find-cmd gsed sed)"
origin="$(git rev-parse --abbrev-ref --symbolic-full-name @{u} \
    | $sed -n 's@/.*@@p')"
origin="${origin-origin}"
ex git fetch --prune --tags "${origin}" \
    || ex git fetch --prune --tags \
        "$(git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d/ -f1)"

# Check for 'dirty' state (and fail). If clean, remote 1 last commit.
ex git update-index -q --ignore-submodules --refresh
ex git diff-files --quiet --exit-code --ignore-submodules -- \
    && ex git diff-index --quiet --exit-code --cached HEAD --ignore-submodules -- \
    || {
        err "You have staged or unstaged changes."
        err "Please commit or stash them."
        ex git status
        exit 1
    }

head="$(git rev-parse HEAD)"
upstream_branch="$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')"
if [ "${head}" = "$(git rev-parse "${upstream_branch}")" ]; then
    err "No new changes upstream (${upstream_branch}) and no local changes to revert"
else
    ex git reset --hard "${upstream_branch}"
    ex git --no-pager log --pretty=format:'%Cred%h%Creset - %s %Cgreen(%cr) %C(bold blue)<%an>%Creset%C(yellow)%d%Creset' --abbrev-commit --date=relative "${head}.."
fi
