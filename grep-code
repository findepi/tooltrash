#!/bin/bash

isatty=yes
[ "$NOCHECKTTY" = "" ] && ! test -t 1 && isatty=no

GIT_SOURCES=
[ "$1" = "-git" ] && { GIT_SOURCES=-git; shift; }

sed="sed --unbuffered"
grep="grep --line-buffered"

clear=clear
[ "$NOCLEAR" != "" ] && clear=

truncatelonglines() {
    # Run `sed` to truncate lines using normal $LANG settings (presumably
    # something with UTF-8?). However, this may fail if file contains illegal
    # byte sequences. In this case nothing will be truncated, so truncate once
    # again -- this time do it byte-wise (LANG=C) but with higher limit.
    #
    # If you use encoding which stores characters usually on more than 1 byte,
    # you will be unhappy.
    linelimit=138
    clinelimit=$[2*linelimit]
    $sed -e "s/^\(.\\{$linelimit,$linelimit\\}\).\\{5,\\}\$/\\1 .../g" | \
        LANG=C $sed -e "s/^\(.\\{$clinelimit,$clinelimit\\}\).\\{5,\\}\$/\\1 .../g"
}

finalcoloring() {
    #sed -e "s/^\([^:]*:[^:]*: \|\.\.\.\)/[01;31m[K&[m[K/g" \
    GREP_COLORS="ms=01;31" $grep --color=always -E "^([^:]*:[^:]*: |\.\.\.)"
    #GREP_COLORS="ms=01;32" $grep --color=always -E "$match"
}

#
# if output is not a tty, some things make no or little sense
#
if [ $isatty = no ]; then
    sed=sed
    grep=grep
    truncatelonglines() { cat; }
    finalcoloring() { cat; }
    clear=
fi


charlist="a-zA-Z_0-9"
char="[$charlist]"
notchar="[^$charlist]"


code="$1"; shift
match="($code)"
$clear
# assume the file names don't contain '\012' = '\n'
sources $GIT_SOURCES "${@:-.}" | tr '\012' '\000' | xargs -0 $grep -nwHIE "$match" \
    | $sed -e 's/^\([^:]*:[^:]*\):/\1 : /' \
    | truncatelonglines \
    | finalcoloring
