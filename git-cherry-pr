#!/bin/bash

set -euo pipefail

err() {
    echo "$@" >&2
    exit 1
}

usage() {
    echo "Usage: $0 [-o] <committish> [<remote upstream branch>]" >&2
}

same_origin=false
origin=origin

while getopts "ho" opt "$@"; do
    case "${opt}" in
        o)
            # Use same remote as the origin of the upstream branch
            same_origin=true
            origin=
            ;;
        h)
            usage
            exit
            ;;
        '?')
            echo "$opt"
            usage
            exit 1
            ;;
        *)
            err "Unrecognized option '${opt}'"
    esac
done

shift $((OPTIND-1))

if ! test $# -ge 1 -a $# -le 2; then
    echo "Incorrect number of arguments" >&2
    usage
    exit 1
fi

commits="$(git rev-parse "$1")"
branch="${2-master}"
private_branch_prefix="$(git config findepi.private-branch-prefix || echo "$(whoami)/")"

sed="$(find-cmd gsed sed)"
open="$(find-cmd xdg-open open)"

git update-index -q --ignore-submodules --refresh \
    || err "refreshing index failed"

git diff-files --exit-code --ignore-submodules -- \
    || err "There are unstaged changed"

git diff-index --exit-code --cached HEAD --ignore-submodules -- \
    || err "There are staged but not committed changes"

if test "${origin}" = ""; then
    # We need to determine origin from branch name.
    # First, try to read from local branch configuration, if that exists.
    if ! origin="$(git config "branch.${branch}.remote")"; then
        # Second, check existing remote branches
        if ! origin="$(git branch -r | $sed 's/^\s\+//' | grep "^\([-a-z]\+\)/${branch}" | cut -d/ -f1)"; then
            err "Failed to find remote for branch ${branch}"
        fi
    fi
fi

commit_slug="$( git log -1 --pretty="%s" ${commits} \
    | tr -cs 'a-zA-Z0-9' '-' \
    | tr 'A-Z' 'a-z' \
    | $sed 's/-*$//' )"

source_hash="$(echo "${commits}" | sha1sum | cut -c 1-6)"

if test "${branch}" = "master"; then
    branch_qualifier=""
else
    branch_qualifier="${branch}/"
fi
new_branch_name="${private_branch_prefix}${branch_qualifier}${commit_slug}-${source_hash}"

github_url="$(git remote get-url "${origin}" \
    | $sed 's#\.git$##' \
    | $sed 's#^git@\([^:]\+\):#https://\1/#' `# support git and https clone URLs`
)"
if "${same_origin}" || test "${branch}" != "master"; then
    github_url="${github_url}/compare/${branch}...${new_branch_name}?expand=1"
else
    github_url="${github_url}/compare/${new_branch_name}?expand=1"
fi

# Now we must print everything we do. In case of failure, user might want to
# know how to rollback.
set -x

git checkout "${origin}/${branch}" \
    && git cherry-pick ${commits} \
    && git push "${origin}" "HEAD:refs/heads/${new_branch_name}" \
    && $open "${github_url}" \
    && git checkout -
